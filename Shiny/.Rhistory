genera=data.frame(unique(phyto_data[,c("Genus")]))
names(genera)="Genus"
#Rename selected response var (abundance or biovolume)
if(input$abd_bv==1 | input$phyto_samp_type=="HAB"){ #abd
names(phyto_plot_data)[names(phyto_plot_data)=="CellperML"]="raw_response"
}else{ #bv
names(phyto_plot_data)[names(phyto_plot_data)=="CellVolume_u3mL"]="raw_response"
}
#Aggregate data by genus or division
if(input$genus_or_division==1){ #genus
#Fill implicit zeros
samps_groups=merge(samples, genera, all=T)
phyto_plot_data=merge(samps_groups, phyto_plot_data, all.x=T)
phyto_plot_data$raw_response[is.na(phyto_plot_data$raw_response)]=0
#Aggregate
agg_phyto_plot_data=aggregate(raw_response~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date+Year+Month+Genus, phyto_plot_data, FUN='sum')
#subset to selected genus
agg_phyto_plot_data=agg_phyto_plot_data[agg_phyto_plot_data$Genus==input$genus,]
}else{ #division
#Fill implicit zeros
samps_groups=merge(samples, divisions, all=T)
phyto_plot_data=merge(samps_groups, phyto_plot_data, all.x=T)
phyto_plot_data$raw_response[is.na(phyto_plot_data$raw_response)]=0
#Aggregate
agg_phyto_plot_data=aggregate(raw_response~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date+Year+Month+Division, phyto_plot_data, FUN='sum')
#Subset to selected division (if stack_divs==0 or input$phyto_plot_type==2)
if(input$stack_divs==0 | input$phyto_plot_type==2){
agg_phyto_plot_data=agg_phyto_plot_data[agg_phyto_plot_data$Division==input$division,]
}
}
#Calc sample totals
totals=aggregate(raw_response~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date, phyto_plot_data, FUN='sum')
names(totals)[names(totals)=="raw_response"]="total"
#Merge sample totals to agg'd data
agg_phyto_plot_data=merge(agg_phyto_plot_data, totals, all.x=T)
#Calculate relative response
agg_phyto_plot_data$rel_response=agg_phyto_plot_data$raw_response/agg_phyto_plot_data$total
}else{
agg_phyto_plot_data=phyto_plot_data[,c("CellperML","Monitoring.Location.ID","Monitoring.Location.Latitude","Monitoring.Location.Longitude","Date","Year","Month","Genus")]
}
#Update input.adv_bv to abundance if sample type is HAB
#Set response
if((input$abd_bv==1 & input$abund_relabund=="Abundance") | (input$abd_bv==2 & input$bv_rbv=="Biovolume")){
agg_phyto_plot_data$response=agg_phyto_plot_data$raw_response
}else{
agg_phyto_plot_data$response=agg_phyto_plot_data$rel_response
}
if(input$phyto_samp_type=="HAB"){
if(input$abund_relabund=="Abundance"){
agg_phyto_plot_data$response=agg_phyto_plot_data$raw_response
}else{
agg_phyto_plot_data$response=agg_phyto_plot_data$rel_response
}
}
#Rename grouping var (Genus or Division)
names(agg_phyto_plot_data)[names(agg_phyto_plot_data)=="Genus"]="group"
names(agg_phyto_plot_data)[names(agg_phyto_plot_data)=="Division"]="group"
#Append into reactive_objects
reactive_objects$agg_phyto_plot_data=agg_phyto_plot_data
#Generate label
#genus/abd
if(input$genus_or_division==1){
ycomp1=input$genus
}else{
if(input$stack_divs==1 & input$phyto_plot_type!=2){
ycomp1="Division"
}else{
ycomp1=input$division
}
}
if(input$abd_bv==1 | input$phyto_samp_type=="HAB"){
if(input$abund_relabund=="Abundance"){
ycomp2="abundance (cells/mL)"
}else{
ycomp2="relative abundance"
}
}else{
if(input$bv_rbv=="Biovolume"){
ycomp2="biovolume (u3/mL)"
}else{
ycomp2="relative biovolume"
}
}
ylabel=paste(ycomp1,ycomp2)
reactive_objects$phyto_ylab=ylabel
#print(ylabel)
#print(head(agg_phyto_plot_data))
})
output$map_reldepth <- renderUI({
selectInput("map_reldepth", "Sample depth:", reactive_objects$map_reldepth_choices, selected=input$map_reldepth,selectize=T)
})
output$genus <- renderUI({
selectInput("genus","Genus:",choices=unique(phyto_data$Genus)[order(unique(phyto_data$Genus))], selected=input$genus,selectize=T)
})
output$division <- renderUI({
selectInput("division","Algal division:",choices=unique(phyto_data$Division)[order(unique(phyto_data$Division))], selected=input$division,selectize=T)
})
#Tab 1: Elevation plot outputs
output$elev_plot=renderPlot({
par(mfrow=c(2,1),mar=c(4.1,6.1,4.1,5.1))
elev_plot_data=lake_elev_data[lake_elev_data$Year>=input$elev_plot_years[1]&lake_elev_data$Year<=input$elev_plot_years[2],]
suppressWarnings(
lineplot.CI(Year,Elevation..ft.,data=elev_plot_data,x.cont=TRUE,xlim=c(input$elev_plot_years[1],input$elev_plot_years[2]),cex=1.5,
ylab="Lake elevation (ft)",xlab="Year",cex.lab=2,cex.axis=1.5,legend=F,err.width=0.05,pch=21,col="blue",lwd=2,xaxt='n')
)
axis(1,cex.axis=1.5,cex.lab=2)
if(input$elev_rulers==1){
abline(h=input$elev_ruler1,lwd=2,lty=2,col="orange")
}
suppressWarnings(
lineplot.CI(Month,Elevation..ft.,data=elev_plot_data,x.cont=TRUE,xlim=c(1,12),cex=1.5,
ylab="Lake elevation (ft)",xlab="Month",cex.lab=2,cex.axis=1.5,legend=F,err.width=0.05,pch=21,col="blue",lwd=2,xaxt='n')
)
axis(1,cex.axis=1.5,cex.lab=2,at=seq(1,12,1))
if(input$elev_rulers==1){
abline(h=input$elev_ruler2,lwd=2,lty=2,col="orange")
}
})
#Tab 2: Water quality plot outputs
output$wq_plot=renderPlot({
req(reactive_objects$wq_plot_data)
req(input$reldepth1)
if(input$chem_param1_log==FALSE & input$chem_param2_log==FALSE){plot_log=''}
if(input$chem_param1_log==TRUE & input$chem_param2_log==FALSE){plot_log='y'}
if(input$chem_param1_log==FALSE & input$chem_param2_log==TRUE){plot_log='x'}
if(input$chem_param1_log==TRUE & input$chem_param2_log==TRUE){plot_log='xy'}
#Plot type 1: time series
if(input$chem_plot_type==1 | input$chem_plot_type==2){
plot_data=reactive_objects$wq_plot_data
plot_data=plot_data[
plot_data$Parameter==input$chem_param1&
plot_data$Fraction==input$chem_frac1&
plot_data$Depth==input$reldepth1
,]
units=plot_data$Result.Unit[1]
ylabel=paste0(input$chem_param1," (",units,")")
title=paste(input$chem_frac1,"-",input$reldepth1)
}
plot_data=reactive_objects$wq_plot_data
plot_data=plot_data[
plot_data$Parameter==input$chem_param1&
plot_data$Fraction==input$chem_frac1&
plot_data$Depth==input$reldepth1
,]
units=plot_data$Result.Unit[1]
ylabel=paste0(input$chem_param1," (",units,")")
title=paste(input$chem_frac1,"-",input$reldepth1)
if(input$chem_plot_type==3){
plot_data1=plot_data[,c("Date","Monitoring.Location.ID","Year","Month","Result.Value")]
plot_data2=reactive_objects$wq_plot_data
plot_data2=plot_data2[
plot_data2$Parameter==input$chem_param2&
plot_data2$Fraction==input$chem_frac2&
plot_data2$Depth==input$reldepth2
,]
units2=plot_data2$Result.Unit[1]
xlabel=paste0(input$chem_param2," (",units2,")")
plot_data2=plot_data2[,c("Date","Monitoring.Location.ID","Year","Month","Result.Value")]
names(plot_data2)[names(plot_data2) == 'Result.Value'] <- 'Result.Value2'
sp_data=merge(plot_data1,plot_data2)
}
if(input$chem_plot_type==1){
par(mfrow=c(2,1),mar=c(4.1,6.1,4.1,5.1))
if(dim(plot_data)[1]>0){
suppressWarnings(
lineplot.CI(Year,Result.Value,data=plot_data,x.cont=TRUE,xlim=c(input$plot_years[1],input$plot_years[2]),cex=1.5,
ylab=ylabel,xlab="Year",cex.lab=2,cex.axis=1.5,legend=F,err.width=0.05,pch=21,col="blue",lwd=2,xaxt='n',main=title,cex.main=2)
)
axis(1,cex.axis=1.5,cex.lab=2)
suppressWarnings(
lineplot.CI(Month,Result.Value,data=plot_data,x.cont=TRUE,xlim=c(1,12),cex=1.5,
ylab=ylabel,xlab="Month",cex.lab=2,cex.axis=1.5,legend=F,err.width=0.05,pch=21,col="blue",lwd=2,xaxt='n',main=title,cex.main=2)
)
axis(1,cex.axis=1.5,cex.lab=2)
#suppressWarnings(
#	plotmeans(Result.Value~Year,plot_data,n.label=F,barcol="blue",barwidth=2,lwd=2,col="blue",pch=19,cex=2,
#		xlab="Year",cex.lab=2,cex.axis=2,ylab=ylabel,main=title,cex.main=2,xlim=c(input$plot_years[1],input$plot_years[2]))
#)
#suppressWarnings(
#	plotmeans(Result.Value~Month,plot_data,n.label=F,barcol="blue",barwidth=2,lwd=2,col="blue",pch=19,cex=2,
#		xlab="Month",cex.lab=2,cex.axis=2,ylab=ylabel,main=title,cex.main=2,xlim=c(1,12))
#)
}
}
#Plot type 2: boxplots
if(input$chem_plot_type==2){
par(mar=c(16,8,4.1,3))
if(dim(plot_data)[1]>0){
if(plot_log=="y" | plot_log=="xy"){
boxplot(Result.Value~Monitoring.Location.ID,plot_data,cex.axis=2,cex.lab=2.5,ylab=ylabel,xlab=NA,main=title,cex.main=2,yaxt='n',las=2,log='y')
}else{
boxplot(Result.Value~Monitoring.Location.ID,plot_data,cex.axis=2,cex.lab=2.5,ylab=ylabel,xlab=NA,main=title,cex.main=2,yaxt='n',las=2)
}
axis(2,cex.axis=2) # xxx
}
}
#Plot type 3: pairwise
if(input$chem_plot_type==3){
par(mar=c(8,8,2,3))
sp_data=na.omit(sp_data)
if(dim(sp_data)[1]>2){
plot(Result.Value~Result.Value2,sp_data,
ylab=ylabel, xlab=xlabel, cex.lab=2.5,cex.axis=2,log=plot_log)
if(plot_log==''){lm_n=lm(Result.Value~Result.Value2,sp_data)}
if(plot_log=='x'){lm_n=lm(Result.Value~log10(Result.Value2),sp_data)}
if(plot_log=='y'){lm_n=lm(log10(Result.Value)~Result.Value2,sp_data)}
if(plot_log=='xy'){lm_n=lm(log10(Result.Value)~log10(Result.Value2),sp_data)}
req(lm_n)
abline(lm_n$coefficients[1],lm_n$coefficients[2],lwd=2,lty=2,col="purple")
r2=round(summary(lm_n)$adj.r.squared,2)
pval=round(summary(lm_n)$coefficients[2,4],2)
legend('bottomright',bty='n',legend=c(paste0("r2 = ",r2),paste0("p = ",pval)),cex=2.5)
}else{
frame()
box()
text(0.5,0.5,"Two or fewer paired samples", cex=3)}
}
})
#Tab 3: TSI plot outputs
output$tsi_plot=renderPlot({
tsi_plot_data=reactive_objects$trophic_plot_data
TSI_flat=tsi_plot_data[,c("Date","Monitoring.Location.ID","Year","Month","TSIchl","TSItp","TSIsd")]
TSI_flat=melt(TSI_flat,id.vars=c("Date","Monitoring.Location.ID","Year","Month"))
if(dim(tsi_plot_data)[1]>0){
#Time series
if(input$TSI_plot_type==1){
par(mfrow=c(2,1),mar=c(4.1,6.1,4.1,5.1))
suppressWarnings(lineplot.CI(Year,value,group=variable,data=TSI_flat,legend=F,pch=c(NA,NA,NA),err.width=0.05,err.col=NA,type='p',xlab="Year",ylab="TSI",x.cont=TRUE,xaxt='n',cex.axis=1.5,cex.lab=2,xlim=c(input$plot_years[1],input$plot_years[2])))
agg=aggregate(value~Year+variable,TSI_flat,FUN='mean')
lines(value~Year,agg[agg$variable=="TSIchl",],col="green",lwd=2)
lines(value~Year,agg[agg$variable=="TSIsd",],col="blue",lwd=2)
lines(value~Year,agg[agg$variable=="TSItp",],col="orange",lwd=2)
suppressWarnings(lineplot.CI(as.factor(Year),value,group=variable,data=TSI_flat,legend=F,pch=c(21,21,21),col=c("green","orange","blue"),err.width=0.05,type='p',add=TRUE,xaxt='n',yaxt='n',lwd=2,x.cont=TRUE,cex=2))
axis(1,cex.axis=1.5,cex.lab=2)
legend("bottomleft",pch=21,col=c("blue","orange","green"),legend=c("Secchi TSI","TP TSI","ChlA TSI"),lty=c(1,1,1),lwd=2,bty='n',cex=1.5)
suppressWarnings(lineplot.CI(Month,value,group=variable,data=TSI_flat,legend=F,pch=c(NA,NA,NA),err.width=0.05,err.col=NA,type='p',xlab="Month",ylab="TSI",x.cont=TRUE,xaxt='n',cex.axis=1.5,cex.lab=2,ylim=c(30,100),xlim=c(1,12)))
agg=aggregate(value~Month+variable,TSI_flat,FUN='mean')
lines(value~Month,agg[agg$variable=="TSIchl",],col="green",lwd=2)
lines(value~Month,agg[agg$variable=="TSIsd",],col="blue",lwd=2)
lines(value~Month,agg[agg$variable=="TSItp",],col="orange",lwd=2)
suppressWarnings(lineplot.CI(as.factor(Month),value,group=variable,data=TSI_flat,legend=F,pch=c(21,21,21),col=c("green","orange","blue"),err.width=0.05,type='p',add=TRUE,xaxt='n',yaxt='n',lwd=2,x.cont=TRUE,cex=2))
axis(1,cex.axis=1.5,cex.lab=2,at=seq(1,12,1))
legend("bottomleft",pch=21,col=c("blue","orange","green"),legend=c("Secchi TSI","TP TSI","ChlA TSI"),lty=c(1,1,1),lwd=2,bty='n',cex=1.5)
}
#TSI boxplot
if(input$TSI_plot_type==2){
par(mar=c(6,6,1,1))
boxplot(tsi_plot_data$TSIchl,tsi_plot_data$TSItp,tsi_plot_data$TSIsd,border=c("green","orange","blue"),
names=c("ChlA","TP","Secchi"),ylab="TSI",cex.axis=2,cex.lab=2.5,lwd=2,ylim=c(0,120))
}
#Scatterplot
if(input$TSI_plot_type==3){
par(mar=c(6,6,1,1))
plot3dTSI(tsi_plot_data)
}
#Site boxplot
if(input$TSI_plot_type==4){
par(mfrow=c(2,2),mar=c(8,8,1,1))
site_bp_data=tsi_plot_data[tsi_plot_data$Monitoring.Location.ID%in%
c(4917310,4917370,4917390,4917450,4917500,4917520,4917600,4917770)
,]
if(all(is.na(site_bp_data$TSIchl))){
plot(0,xaxt='n',yaxt='n',bty='n',pch='',ylab='Chl A TSI',xlab='',cex.lab=2)
text(1,0,"No data for selected period.",cex=1.5)
}else{
plotmeans(TSIchl~Monitoring.Location.ID,site_bp_data,las=2,connect=F,xlab="",col="blue",cex=3, ylab="Chl A TSI",cex.lab=2,cex.axis=1.5,barwidth=2,n.label=F)
}
if(all(is.na(site_bp_data$TSItp))){
plot(0,xaxt='n',yaxt='n',bty='n',pch='',ylab='TP TSI',xlab='',cex.lab=2)
text(1,0,"No data for selected period.",cex=1.5)
}else{
plotmeans(TSItp~Monitoring.Location.ID,site_bp_data,las=2,connect=F,xlab="",col="blue",cex=3, ylab="TP TSI",cex.lab=2,cex.axis=1.5,barwidth=2,n.label=F)
}
if(all(is.na(site_bp_data$TSIsd))){
plot(0,xaxt='n',yaxt='n',bty='n',pch='',ylab='SD TSI',xlab='',cex.lab=2)
text(1,0,"No data for selected period.",cex=1.5)
}else{
plotmeans(TSIsd~Monitoring.Location.ID,site_bp_data,las=2,connect=F,xlab="",col="blue",cex=3, ylab="SD TSI",cex.lab=2,cex.axis=1.5,barwidth=2,n.label=F)
}
}
}
})
#Tab 4: Trophic NLA comparison
output$nla_comp=renderPlot({
ul_data=reactive_objects$trophic_plot_data
names(nla_data)[names(nla_data) == 'Total_phosphorus_mgL'] <- 'Phosphate-phosphorus'
names(nla_data)[names(nla_data) == 'Chlorophyll_a_ugL'] <- 'Chlorophyll a'
names(nla_data)[names(nla_data) == 'Secchi_m'] <- 'Depth, Secchi disk depth'
if(input$nla_comp_plot_type==1){
ylabel=names(nla_comp_choices[nla_comp_choices==input$comp_param_y])
xlabel=names(nla_comp_choices[nla_comp_choices==input$comp_param_x])
par(mar=c(12,12,3,1))
plot(nla_data[,input$comp_param_y]~nla_data[,input$comp_param_x],log='xy',pch=21,col="black",bg="white",cex=1.5,
ylab=ylabel, xlab=xlabel, cex.lab=2, cex.axis=1.5)
lm_nla=lm(log10(nla_data[,input$comp_param_y])~log10(nla_data[,input$comp_param_x]))
abline(lm_nla$coefficients[1],lm_nla$coefficients[2],lwd=4,lty=2,col="black")
if(lm_nla$coefficients[2]>0){leg_location="bottomright"}else{leg_location="bottomleft"}
if(input$comp_param_x!="Total_nitrogen_mgL"&input$comp_param_y!="Total_nitrogen_mgL"){
points(ul_data[,input$comp_param_y]~ul_data[,input$comp_param_x],col="black",bg="orange",pch=21,cex=2.5)
lm_ul=lm(log10(ul_data[,input$comp_param_y])~log10(ul_data[,input$comp_param_x]))
abline(lm_ul$coefficients[1],lm_ul$coefficients[2],lwd=4,lty=2,col="orange")
legend(leg_location,bty='n',pch=21,col=c("black","black"),pt.bg=c("orange","white"),cex=2.5, pt.cex=c(2.5,1.5),legend=c("Utah Lake","NLA"))
}else{
legend(leg_location,bty='n',pch=21,col="black",pt.bg="white",cex=2.5, pt.cex=1.5,legend="NLA")
}
}
if(input$nla_comp_plot_type==2){
par(mar=c(12,12,3,3))
boxplot(ul_data$TSIchl,ul_data$TSItp,ul_data$TSIsd,nla_data$TSIchl,nla_data$TSItp,nla_data$TSIsd, boxwex=0.375, at=c(0,0.4,0.8,1.6,2,2.4),xaxt='n',
border=c("green","orange","blue"),ylab="TSI",cex.axis=2,cex.lab=2.5,lwd=2,ylim=c(0,120))
axis(1,at=c(0,0.4,0.8,1.6,2,2.4),outer=F,labels=c("ChlA","TP","Secchi","ChlA","TP","Secchi"),cex.axis=1.5)
axis(1,at=c(0.4,2),outer=T,lty=0,labels=c("Utah Lake","NLA"),line=-9,cex.axis=2.5)
if(input$comp_bp_ruler_onoff==1){
abline(h=input$comp_bp_ruler,lty=2,lwd=3,col="purple")
}
}
})
#Tab 5: WQ Map
costraster=raster("polyrast/costrast2")
mask_poly=readOGR(paste0(getwd(),"/polyrast"),"UtahLake_poly_wgs84")
projection(mask_poly)=c("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
projection(costraster)=c("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
output$wq_map <- renderPlot({
input$interpolate
isolate({
par(mar=c(6,4,6,2))
req(reactive_objects$wq_map_data)
req(input$map_reldepth)
map_data=reactive_objects$wq_map_data
map_data=map_data[
map_data$Parameter==input$map_param&
map_data$Fraction==input$map_frac&
map_data$Depth==input$map_reldepth
,]
units=map_data$Result.Unit[1]
req(units)
maptitle=paste0(input$map_frac," ",input$map_reldepth," ",input$map_param," (",units,")")
ipdwMap(mapdata=map_data,costraster=costraster,maptitle=maptitle,mask_poly=mask_poly)
#plot(mask_poly,add=T)
})
})
#Tab 6: Phytoplankton
#Genus/Division time series (single taxon) (consider adding log y capability - will need to transform response w/ +1 or +0.01 etc), need to work on stacked plot legend placement/colors
output$phyto_output<-renderPlot({
req(reactive_objects$agg_phyto_plot_data)
agg_phyto_plot_data=reactive_objects$agg_phyto_plot_data
ylabel=reactive_objects$phyto_ylab
par(mfrow=c(2,1),mar=c(4.1,6.1,4.1,20.1))
if(dim(reactive_objects$phyto_plot_data)[1]>0){
if(input$phyto_plot_type==1){
if(input$genus_or_division==2 & input$stack_divs==1){ #stacked division plot
xleg_yr=input$phyto_plot_years[2]+((input$phyto_plot_years[2]-input$phyto_plot_years[1])/(max(phyto_data$Year, na.rm=T)-min(phyto_data$Year, na.rm=T)))
xleg_mon=input$phyto_plot_months[2]+((input$phyto_plot_months[2]-input$phyto_plot_months[1])/(15))
pal_len=max(c(length(levels(agg_phyto_plot_data$group)),8))
cols=brewer.pal(pal_len, name="Dark2")
par(xpd=TRUE)
suppressWarnings(
lineplot.CI(Year, response, group, data=agg_phyto_plot_data,x.cont=TRUE,xlim=c(input$phyto_plot_years[1],input$phyto_plot_years[2]),cex=1.5,
ylab=ylabel,xlab="Year",cex.lab=1.5,cex.axis=1.5,err.width=0.05,col=cols, xaxt='n',fixed=T, cex.leg=1.5, x.leg=xleg_yr)
)
axis(1,cex.axis=1.5,cex.lab=2)
suppressWarnings(
lineplot.CI(Month, response, group, data=agg_phyto_plot_data,x.cont=TRUE,xlim=c(input$phyto_plot_months[1],input$phyto_plot_months[2]),cex=1.5,
ylab=ylabel,xlab="Month",cex.lab=1.5,cex.axis=1.5,err.width=0.05,col=cols, xaxt='n',fixed=T, cex.leg=1.5, x.leg=xleg_mon)
)
axis(1,cex.axis=1.5,cex.lab=2)
par(xpd=FALSE)
}else{ #All single plots
suppressWarnings(
lineplot.CI(Year, response, group, data=agg_phyto_plot_data,x.cont=TRUE,xlim=c(input$phyto_plot_years[1],input$phyto_plot_years[2]),cex=1.5,
ylab=ylabel,xlab="Year",cex.lab=1.5,cex.axis=1.5,legend=F,err.width=0.05,pch=21,col="blue",lwd=2,xaxt='n')
)
axis(1,cex.axis=1.5,cex.lab=2)
suppressWarnings(
lineplot.CI(Month, response, group,data=agg_phyto_plot_data,x.cont=TRUE,xlim=c(input$phyto_plot_months[1],input$phyto_plot_months[2]),cex=1.5,
ylab=ylabel,xlab="Month",cex.lab=1.5,cex.axis=1.5,legend=F,err.width=0.05,pch=21,col="blue",lwd=2,xaxt='n')
)
axis(1,cex.axis=1.5,cex.lab=2)
}
}
}else{
frame()
box()
text(0.5,0.5,"No data for selected years & months.", cex=1.75)
frame()
box()
text(0.5,0.5,"No data for selected years & months.", cex=1.75)
}
})
output$phyto_map_output <- renderLeaflet({
req(reactive_objects$agg_phyto_plot_data)
req(reactive_objects$phyto_plot_data)
agg_phyto_plot_data=reactive_objects$agg_phyto_plot_data
addLegendCustom <- function(map, colors, labels, sizes, opacity = 0.5){ ###From: https://stackoverflow.com/questions/37446283/creating-legend-with-circles-leaflet-r
colorAdditions <- paste0(colors, "; width:", sizes, "px; height:", sizes, "px")
labelAdditions <- paste0("<div class = 'legendCircle' style='display: inline-block;height: ", sizes, "px;margin-top: 4px;line-height: ", sizes, "px;'>", labels, "</div>")
return(addLegend(map, title = legend_title, colors = colorAdditions, labels = labelAdditions))
}
#Aggregate data by site
if(dim(agg_phyto_plot_data)[1]>0){
agg_phyto_plot_data_site=aggregate(response~Monitoring.Location.ID,agg_phyto_plot_data,FUN='mean')
#Generate sites
sites=unique(agg_phyto_plot_data[,c("Monitoring.Location.ID","Monitoring.Location.Latitude","Monitoring.Location.Longitude")])
legend_title=reactive_objects$phyto_ylab
names(agg_phyto_plot_data_site)[names(agg_phyto_plot_data_site)=="response"]="z_val"
agg_phyto_plot_data_site=merge(agg_phyto_plot_data_site,sites)
####Fixed z-scaling
if(input$phyto_z_fixed_dynamic=="Fixed"){
if(input$phyto_samp_type=="Total phytoplankton"){
if((input$abd_bv==1 & input$abund_relabund=="Relative abundance") | (input$abd_bv==2 & input$bv_rbv=="Relative biovolume")){
agg_phyto_plot_data_site$size=(agg_phyto_plot_data_site$z_val+0.1)*0.5
legend_labs=c(0,0.25,0.5,0.75,1)
legend_sizes=((legend_labs+0.1))*75
}else{
if(input$abd_bv==1){
if(input$genus_or_division==1){
temp_agg=aggregate(CellperML~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date+Year+Month+Genus, phyto_data, FUN='sum')
}else{
temp_agg=aggregate(CellperML~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date+Year+Month+Division, phyto_data, FUN='sum')
}
fixed_scale<-data.frame(phyto_data[,"CellperML"],rescale(log10(phyto_data[,"CellperML"]+1),c(0.1,0.5)))
}else{
if(input$genus_or_division==1){
temp_agg=aggregate(CellVolume_u3mL~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date+Year+Month+Genus, phyto_data, FUN='sum')
}else{
temp_agg=aggregate(CellVolume_u3mL~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date+Year+Month+Division, phyto_data, FUN='sum')
}
fixed_scale<-data.frame(temp_agg[,"CellVolume_u3mL"],rescale(log10(temp_agg[,"CellVolume_u3mL"]+1),c(0.1,0.5)))
}
names(fixed_scale)=c("response","fixed_scale")
fixed_scale_lm=lm(fixed_scale~log10(response+1),fixed_scale)
agg_phyto_plot_data_site$response=agg_phyto_plot_data_site$z_val
agg_phyto_plot_data_site$size=predict(fixed_scale_lm,newdata=agg_phyto_plot_data_site)
legend_labs=c(min(fixed_scale$response, na.rm=T),quantile(fixed_scale$response,0.5, na.rm=T),quantile(fixed_scale$response,0.9, na.rm=T),quantile(fixed_scale$response,0.95, na.rm=T),quantile(fixed_scale$response,0.99, na.rm=T),quantile(fixed_scale$response,0.999, na.rm=T))
legend_labs=signif(legend_labs,2)
legend_sizes=c(min(fixed_scale$fixed_scale, na.rm=T),quantile(fixed_scale$fixed_scale,0.5, na.rm=T),quantile(fixed_scale$fixed_scale,0.9, na.rm=T),quantile(fixed_scale$fixed_scale,0.95, na.rm=T),quantile(fixed_scale$fixed_scale,0.99, na.rm=T),quantile(fixed_scale$fixed_scale,0.999, na.rm=T))*75
legend_sizes=legend_sizes*2
}
}
if(input$phyto_samp_type=="HAB"){
if(input$abund_relabund=="Relative abundance"){
agg_phyto_plot_data_site$size=(agg_phyto_plot_data_site$z_val+0.1)*0.5
legend_labs=c(0,0.25,0.5,0.75,1)
legend_sizes=((legend_labs+0.1))*75
}else{
if(input$genus_or_division==1){
temp_agg=aggregate(CellperML~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date+Year+Month+Genus, phyto_data, FUN='sum')
}else{
temp_agg=aggregate(CellperML~Monitoring.Location.ID+Monitoring.Location.Latitude+Monitoring.Location.Longitude+Date+Year+Month+Division, phyto_data, FUN='sum')
}
fixed_scale<-data.frame(phyto_data[,"CellperML"],rescale(log10(phyto_data[,"CellperML"]+1),c(0.1,0.5)))
names(fixed_scale)=c("response","fixed_scale")
fixed_scale_lm=lm(fixed_scale~log10(response+1),fixed_scale)
agg_phyto_plot_data_site$response=agg_phyto_plot_data_site$z_val
agg_phyto_plot_data_site$size=predict(fixed_scale_lm,newdata=agg_phyto_plot_data_site)
legend_labs=c(min(fixed_scale$response, na.rm=T),quantile(fixed_scale$response,0.5, na.rm=T),quantile(fixed_scale$response,0.9, na.rm=T),quantile(fixed_scale$response,0.95, na.rm=T),quantile(fixed_scale$response,0.99, na.rm=T),quantile(fixed_scale$response,0.999, na.rm=T))
legend_labs=signif(legend_labs,2)
legend_sizes=c(min(fixed_scale$fixed_scale, na.rm=T),quantile(fixed_scale$fixed_scale,0.5, na.rm=T),quantile(fixed_scale$fixed_scale,0.9, na.rm=T),quantile(fixed_scale$fixed_scale,0.95, na.rm=T),quantile(fixed_scale$fixed_scale,0.99, na.rm=T),quantile(fixed_scale$fixed_scale,0.999, na.rm=T))*75
legend_sizes=legend_sizes*2
}
}
agg_phyto_plot_data_site$radius=agg_phyto_plot_data_site$size*75
}else{
###Dynamic z-scaling
agg_phyto_plot_data_site$size=rescale(agg_phyto_plot_data_site$z_val,c(0.1,0.5))
agg_phyto_plot_data_site$radius=agg_phyto_plot_data_site$size*75
#print(head(agg_phyto_plot_data_site))
legend_labs=c(min(agg_phyto_plot_data_site$z_val),quantile(agg_phyto_plot_data_site$z_val,0.25),quantile(agg_phyto_plot_data_site$z_val,0.5),quantile(agg_phyto_plot_data_site$z_val,0.75),max(agg_phyto_plot_data_site$z_val))
legend_labs=signif(legend_labs,2)
legend_sizes=c(min(agg_phyto_plot_data_site$radius),quantile(agg_phyto_plot_data_site$radius,0.25),quantile(agg_phyto_plot_data_site$radius,0.5),quantile(agg_phyto_plot_data_site$radius,0.75),max(agg_phyto_plot_data_site$radius))
legend_sizes=legend_sizes*2
}
legend=unique(data.frame(legend_sizes,legend_labs))
phyto_points=st_as_sf(agg_phyto_plot_data_site, coords = c("Monitoring.Location.Longitude", "Monitoring.Location.Latitude"), crs = 4326, remove=FALSE) # crs 4326 is WGS84
}
if(dim(reactive_objects$phyto_plot_data)[1]>0){
phyto_map=leaflet(phyto_points) %>%
addTiles() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "Satellite") %>%
addPolygons(data=ul_poly,smoothFactor=2,fillOpacity = 0,weight=3,color="lightskyblue") %>%
addFeatures(phyto_points,color="orange",radius=phyto_points$radius, stroke=F,fillOpacity=0.5) %>%
addFeatures(phyto_points,color="orange",stroke=F,fillOpacity=0,
popup = paste0(
"MLID: ", phyto_points$Monitoring.Location.ID,
"<br> Value: ", signif(phyto_points$z_val,2))
) %>%
addLegendCustom(colors = rep("orange", dim(legend)[1]), labels = legend$legend_labs, sizes = legend$legend_sizes) %>%
addLayersControl(
position ="topleft",
baseGroups = c("Topo","Satellite"),
options = layersControlOptions(collapsed = FALSE, autoZIndex=FALSE))
}else{
phyto_map=leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "Satellite") %>%
addPolygons(data=ul_poly,smoothFactor=2,fillOpacity = 0,weight=3,color="lightskyblue") %>%
addLayersControl(
position ="topleft",
baseGroups = c("Topo","Satellite"),
options = layersControlOptions(collapsed = FALSE, autoZIndex=FALSE))
}
})
}
# Run app
shinyApp(ui = ui, server = server)
# Publish Shiny app (run in console)
library(shiny)
deployApp(appDir=getwd(),appFiles=NULL,forceUpdate=T,account='markfernandez',appName='TEST_UtahLakeDataExplorer2')
library(rsconnect)
deployApp(appDir=getwd(),appFiles=NULL,forceUpdate=T,account='markfernandez',appName='TEST_UtahLakeDataExplorer2')
